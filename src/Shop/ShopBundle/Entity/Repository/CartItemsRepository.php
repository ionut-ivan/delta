<?php

namespace Shop\ShopBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * CartItemsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartItemsRepository extends EntityRepository {

    public function checkExistence($id) {

        $query = $this->_em->createQuery('SELECT count(p.product_id) FROM Shop\ShopBundle\Entity\CartItems p WHERE p.product_id = ?1');
        $query->setParameter(1, (int) $id);
        $result = $query->getSingleScalarResult();

        return $result;
    }

    public function getExistingQuantity($id) {
        $query = $this->_em->createQuery('SELECT p.quantity FROM Shop\ShopBundle\Entity\CartItems p WHERE p.product_id = ?1');
        $query->setParameter(1, (int) $id);
        $result = $query->getSingleScalarResult();

        return $result;
    }

    public function UpdateQuantity($id, $quantity) {
        $query = $this->_em->createQuery('UPDATE Shop\ShopBundle\Entity\CartItems p SET p.quantity = ?1 WHERE p.product_id = ?2');
        $query->setParameter(1, $quantity);
        $query->setParameter(2, $id);
        $result = $query->getResult();
    }

    public function totalPrice($total, $price, $quantity) {

        $total = $total + $price * $quantity;

        return $total;
    }

    public function nrProducts($cartid) {
        $query = $this->_em->createQuery('SELECT count(p.product_id) FROM Shop\ShopBundle\Entity\CartItems p WHERE p.cart_id = ?1');
        $query->setParameter(1, (int) $cartid);
        $result = $query->getSingleScalarResult();

        return $result;
    }
    
    public function getLatestItems($limit, $cartid) {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addEntityResult('Shop\ShopBundle\Entity\CartItems', 'p');
//        $rsm->addEntityResult('Shop\ShopBundle\Entity\Product', 'x');
        $rsm->addFieldResult('p', 'id', 'id'); // ($alias, $columnName, $fieldName)
        $rsm->addFieldResult('p', 'title', 'title'); // ($alias, $columnName, $fieldName)
        $rsm->addFieldResult('p', 'price', 'price'); // ($alias, $columnName, $fieldName)
        $rsm->addFieldResult('p', 'path', 'path'); // ($alias, $columnName, $fieldName)
        $rsm->addFieldResult('p', 'filename', 'filename'); // ($alias, $columnName, $fieldName)
        $rsm->addMetaResult('p', 'product_id', 'product_id'); // ($alias, $columnName, $fieldName)

        $qb = $this->_em->createNativeQuery('SELECT * from cart_items where cart_id = ? ORDER BY RAND() LIMIT 4', $rsm);
        $qb->setParameter(1, $cartid);
        $result = $qb->getResult();

        return $result;
    }
    
        
    public function removeItem($id){
        $query = $this->_em->createQuery('DELETE from Shop\ShopBundle\Entity\CartItems p WHERE p.id = ?1');
        $query->setParameter(1, $$id);
        
        $result = $query->getResult();
    }

}
